name: Update Channels from URL

on:
  workflow_dispatch:
    inputs:
      source_url:
        description: 'URL –∏—Å—Ç–æ—á–Ω–∏–∫–∞ M3U8 —Ñ–∞–π–ª–∞'
        required: true
        type: string
      update_type:
        description: '–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: manual –∏–ª–∏ auto-check'
        required: true
        default: 'manual'
        type: string

env:
  REPO_NAME: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-channels:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 1

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Download source M3U8 file
      id: download
      run: |
        echo "–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: ${{ github.event.inputs.source_url }}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å URL
        if ! curl -f -s -I "${{ github.event.inputs.source_url }}" > /dev/null; then
          echo "‚ùå URL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${{ github.event.inputs.source_url }}"
          exit 1
        fi
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        curl -f -s "${{ github.event.inputs.source_url }}" -o source.m3u8
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π M3U —Ñ–∞–π–ª
        if ! grep -q "#EXTM3U" source.m3u8; then
          echo "‚ùå –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º M3U8"
          exit 1
        fi
        
        echo "‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
        echo "source_size=$(wc -l < source.m3u8)" >> $GITHUB_OUTPUT

    - name: Parse and update channels
      id: update
      run: |
        echo "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–Ω–∞–ª–æ–≤..."
        
        # –°–æ–∑–¥–∞–µ–º Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        cat > update_channels.js << 'EOF'
        const fs = require('fs');
        
        // –ü–∞—Ä—Å–∏–Ω–≥ M3U —Ñ–∞–π–ª–∞
        function parseM3U(content) {
            const lines = content.split('\n');
            const channels = [];
            let currentChannel = null;
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                
                if (line.startsWith('#EXTINF:')) {
                    currentChannel = {
                        extinfLine: line,
                        url: ''
                    };
                } else if (line && !line.startsWith('#') && currentChannel) {
                    currentChannel.url = line;
                    channels.push(currentChannel);
                    currentChannel = null;
                }
            }
            
            return channels;
        }
        
        // –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–∞ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Ç—Ä–æ–∫–∏ #EXTINF
        function findChannelByExtinfLine(extinfLine, sourceChannels) {
            // –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–∏—Å–∫–∞
            for (const source of sourceChannels) {
                if (source.extinfLine === extinfLine) {
                    return source;
                }
            }
            return null;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã
        const currentContent = fs.readFileSync('files/channels.m3u8', 'utf8');
        const sourceContent = fs.readFileSync('source.m3u8', 'utf8');
        
        // –ü–∞—Ä—Å–∏–º
        const currentChannels = parseM3U(currentContent);
        const sourceChannels = parseM3U(sourceContent);
        
        console.log(`üìä –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã: ${currentChannels.length}, –∏—Å—Ç–æ—á–Ω–∏–∫: ${sourceChannels.length}`);
        
        console.log(`\nüìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${sourceChannels.length} –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Å—Ç—Ä–æ–∫ #EXTINF
        let updated = 0;
        const updatedChannels = [];
        
        for (const current of currentChannels) {
            const foundSource = findChannelByExtinfLine(current.extinfLine, sourceChannels);
            
            if (foundSource) {
                if (current.url !== foundSource.url) {
                    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
                    console.log(`üîÑ –û–±–Ω–æ–≤–ª—è–µ–º: ${current.extinfLine.substring(0, 50)}...`);
                    current.url = foundSource.url;
                    updated++;
                }
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            } else {
                // –£–±–∏—Ä–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            }
            
            updatedChannels.push(current);
        }
        
        console.log(`\nüìä –ò–¢–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated} –∫–∞–Ω–∞–ª–æ–≤`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π M3U —Ñ–∞–π–ª
        let newContent = '#EXTM3U\n';
        for (const channel of updatedChannels) {
            newContent += `${channel.extinfLine}\n`;
            newContent += `${channel.url}\n\n`;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        fs.writeFileSync('files/channels.m3u8', newContent);
        
        // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log(`UPDATED_COUNT=${updated}`);
        process.exit(updated > 0 ? 0 : 1);
        EOF
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
        if node update_channels.js > update_output.txt 2>&1; then
          UPDATED_COUNT=$(grep "UPDATED_COUNT=" update_output.txt | cut -d'=' -f2)
          echo "updated_count=${UPDATED_COUNT}" >> $GITHUB_OUTPUT
          echo "has_changes=true" >> $GITHUB_OUTPUT
          cat update_output.txt
        else
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "updated_count=0" >> $GITHUB_OUTPUT
          cat update_output.txt
        fi

    - name: Update config version
      if: steps.update.outputs.has_changes == 'true'
      run: |
        echo "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º timestamp –≤ config.json
        node -e "
        const fs = require('fs');
        const config = JSON.parse(fs.readFileSync('api/config.json', 'utf8'));
        config.channels_config.last_updated = new Date().toISOString();
        config.channels_config.version = Date.now().toString();
        fs.writeFileSync('api/config.json', JSON.stringify(config, null, 2));
        console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
        "

    - name: Commit and push changes
      if: steps.update.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add files/channels.m3u8
        git add api/config.json
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –∫–æ–º–º–∏—Ç–∞
        SOURCE_HOST=$(echo "${{ github.event.inputs.source_url }}" | sed 's|https\?://||' | cut -d'/' -f1)
        UPDATE_TYPE="${{ github.event.inputs.update_type }}"
        UPDATED_COUNT="${{ steps.update.outputs.updated_count }}"
        
        if [ "$UPDATE_TYPE" = "auto-check" ]; then
          COMMIT_MSG="ü§ñ Auto-update channels from ${SOURCE_HOST} (${UPDATED_COUNT} updated)"
        else
          COMMIT_MSG="üì∫ Manual update channels from ${SOURCE_HOST} (${UPDATED_COUNT} updated)"
        fi
        
        git commit -m "$COMMIT_MSG"
        git push

    - name: Summary
      run: |
        echo "## üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **–ò—Å—Ç–æ—á–Ω–∏–∫:** ${{ github.event.inputs.source_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** ${{ github.event.inputs.update_type }}" >> $GITHUB_STEP_SUMMARY
        echo "- **–†–∞–∑–º–µ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞:** ${{ steps.download.outputs.source_size }} —Å—Ç—Ä–æ–∫" >> $GITHUB_STEP_SUMMARY
        echo "- **–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤:** ${{ steps.update.outputs.updated_count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **–ï—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è:** ${{ steps.update.outputs.has_changes }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.update.outputs.has_changes }}" = "true" ]; then
          echo "‚úÖ **–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ÑπÔ∏è **–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã**" >> $GITHUB_STEP_SUMMARY
        fi 