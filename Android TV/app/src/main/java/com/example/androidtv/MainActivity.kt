package com.example.androidtv

import android.app.AlertDialog
import android.content.Intent
import android.graphics.Rect
import android.os.Bundle
import android.text.InputType
import android.util.Log
import android.view.*
import android.widget.Toast
import android.widget.ImageView
import android.widget.TextView
import android.widget.EditText
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.recyclerview.widget.LinearLayoutManager

import java.io.BufferedReader
import java.io.InputStreamReader
import androidx.window.layout.WindowMetricsCalculator
import kotlinx.coroutines.*

class MainActivity : AppCompatActivity() {
    private lateinit var recyclerView: RecyclerView
    private lateinit var adapter: ChannelAdapter
    private lateinit var remoteConfigManager: RemoteConfigManager
    private lateinit var autoUpdateManager: AutoUpdateManager
    private var channels = mutableListOf<Channel>()
    
    companion object {
        private const val TAG = "MainActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        remoteConfigManager = RemoteConfigManager(this)
        autoUpdateManager = AutoUpdateManager(this)

        recyclerView = findViewById(R.id.recyclerView)
        
        // –ü–æ–ª—É—á–∞–µ–º —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        val windowMetrics = WindowMetricsCalculator.getOrCreate().computeCurrentWindowMetrics(this)
        val screenWidth = windowMetrics.bounds.width()
        val cardWidth = resources.getDimensionPixelSize(R.dimen.channel_card_width) + 2 * resources.getDimensionPixelSize(R.dimen.grid_spacing)
        val spanCount = (screenWidth / cardWidth).coerceAtLeast(1)
        val gridLayoutManager = GridLayoutManager(this, spanCount)
        recyclerView.layoutManager = gridLayoutManager
        
        // Add spacing between items
        recyclerView.addItemDecoration(object : RecyclerView.ItemDecoration() {
            override fun getItemOffsets(
                outRect: Rect,
                view: View,
                parent: RecyclerView,
                state: RecyclerView.State
            ) {
                val spacing = resources.getDimensionPixelSize(R.dimen.grid_spacing)
                outRect.set(spacing, spacing, spacing, spacing)
            }
        })
        
        adapter = ChannelAdapter(channels) { channel, _ ->
            playChannel(channel)
        }
        recyclerView.adapter = adapter

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
        loadChannels()
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        lifecycleScope.launch {
            initializeRemoteConfig()
        }
    }
    
    override fun onCreateOptionsMenu(menu: Menu?): Boolean {
        menuInflater.inflate(R.menu.main_menu, menu)
        return true
    }
    
    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_check_updates -> {
                lifecycleScope.launch {
                    checkForUpdates()
                }
                true
            }
            R.id.action_refresh_channels -> {
                lifecycleScope.launch {
                    refreshChannels()
                }
                true
            }
            R.id.action_service_status -> {
                lifecycleScope.launch {
                    showServiceStatus()
                }
                true
            }
            R.id.action_admin_login -> {
                showAdminLoginDialog()
                true
            }
            R.id.action_admin_logout -> {
                logoutAdmin()
                true
            }
            else -> super.onOptionsItemSelected(item)
        }
    }
    
    override fun onDestroy() {
        super.onDestroy()
        autoUpdateManager.cleanup()
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    private suspend fun initializeRemoteConfig() {
        try {
            Log.d(TAG, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
            
            val remoteConfig = remoteConfigManager.checkRemoteConfig()
            
            if (remoteConfig != null) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞
                if (!remoteConfig.serviceAvailable) {
                    showServiceUnavailableDialog(remoteConfig.message)
                    return
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                if (remoteConfig.maintenanceMode) {
                    showMaintenanceDialog(remoteConfig.message)
                    return
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –±–µ–∑ –¥–∏–∞–ª–æ–≥–∞)
                autoUpdateManager.checkForUpdates(remoteConfig, false)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
                if (remoteConfigManager.shouldUpdateChannels(remoteConfig.channelsVersion)) {
                    updateChannelsFromRemote()
                } else {
                    loadChannelsFromCacheOrAssets()
                }
            } else {
                // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                Log.w(TAG, "–£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                loadChannelsFromCacheOrAssets()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ${e.message}")
            loadChannelsFromCacheOrAssets()
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private suspend fun checkForUpdates() {
        try {
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...", Toast.LENGTH_SHORT).show()
            }
            
            val remoteConfig = remoteConfigManager.checkRemoteConfig()
            
            if (remoteConfig != null) {
                autoUpdateManager.checkForUpdates(remoteConfig, true)
            } else {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", Toast.LENGTH_LONG).show()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${e.message}")
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private suspend fun refreshChannels() {
        try {
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...", Toast.LENGTH_SHORT).show()
            }
            
            val channelList = remoteConfigManager.downloadChannelList()
            
            if (channelList != null) {
                val parsedChannels = parseM3U8(channelList)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∫–∞–Ω–∞–ª–æ–≤
                val remoteConfig = remoteConfigManager.checkRemoteConfig()
                remoteConfig?.let {
                    remoteConfigManager.updateChannelVersion(it.channelsVersion)
                }
                
                withContext(Dispatchers.Main) {
                    updateChannelList(parsedChannels)
                    Toast.makeText(this@MainActivity, "–ö–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã", Toast.LENGTH_SHORT).show()
                }
            } else {
                withContext(Dispatchers.Main) {
                    Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤", Toast.LENGTH_LONG).show()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: ${e.message}")
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞
     */
    private suspend fun showServiceStatus() {
        try {
            val remoteConfig = remoteConfigManager.checkRemoteConfig()
            val lastCheck = remoteConfigManager.getLastCheckTime()
            val lastCheckTime = if (lastCheck > 0) {
                java.text.SimpleDateFormat("dd.MM.yyyy HH:mm", java.util.Locale.getDefault())
                    .format(java.util.Date(lastCheck))
            } else {
                "–ù–∏–∫–æ–≥–¥–∞"
            }
            
            val message = if (remoteConfig != null) {
                """
                üü¢ –°–µ—Ä–≤–∏—Å: ${if (remoteConfig.serviceAvailable) "–î–æ—Å—Ç—É–ø–µ–Ω" else "–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
                üì± –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${remoteConfig.appLatestVersion}
                üì∫ –í–µ—Ä—Å–∏—è –∫–∞–Ω–∞–ª–æ–≤: ${remoteConfig.channelsVersion}
                üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: $lastCheckTime
                
                ${if (remoteConfig.message.isNotEmpty()) "üì¢ " + remoteConfig.message else ""}
                """.trimIndent()
            } else {
                """
                üî¥ –°–µ—Ä–≤–∏—Å: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω
                üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: $lastCheckTime
                
                ‚ÑπÔ∏è –†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ
                """.trimIndent()
            }
            
            withContext(Dispatchers.Main) {
                AlertDialog.Builder(this@MainActivity)
                    .setTitle("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞")
                    .setMessage(message)
                    .setPositiveButton("OK", null)
                    .show()
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${e.message}")
            withContext(Dispatchers.Main) {
                Toast.makeText(this@MainActivity, "–û—à–∏–±–∫–∞: ${e.message}", Toast.LENGTH_LONG).show()
            }
        }
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
     */
    private suspend fun updateChannelsFromRemote() {
        try {
            Log.d(TAG, "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
            
            val channelList = remoteConfigManager.downloadChannelList()
            
            if (channelList != null) {
                val parsedChannels = parseM3U8(channelList)
                
                val remoteConfig = remoteConfigManager.checkRemoteConfig()
                remoteConfig?.let {
                    remoteConfigManager.updateChannelVersion(it.channelsVersion)
                }
                
                withContext(Dispatchers.Main) {
                    updateChannelList(parsedChannels)
                    Toast.makeText(this@MainActivity, "–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω", Toast.LENGTH_SHORT).show()
                }
                
                Log.d(TAG, "–ö–∞–Ω–∞–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            } else {
                Log.w(TAG, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–∞–ª—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à")
                loadChannelsFromCacheOrAssets()
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤: ${e.message}")
            loadChannelsFromCacheOrAssets()
        }
    }
    
    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–∞–Ω–∞–ª—ã –∏–∑ –∫—ç—à–∞ –∏–ª–∏ assets
     */
    private suspend fun loadChannelsFromCacheOrAssets() {
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –∫—ç—à–∞
            val cachedChannels = getCachedChannelList()
            
            if (cachedChannels != null) {
                Log.d(TAG, "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ –∫—ç—à–∞")
                val parsedChannels = parseM3U8(cachedChannels)
                withContext(Dispatchers.Main) {
                    updateChannelList(parsedChannels)
                }
            } else {
                Log.d(TAG, "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –∏–∑ assets")
                val localChannels = loadLocalChannels()
                withContext(Dispatchers.Main) {
                    updateChannelList(localChannels)
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: ${e.message}")
            withContext(Dispatchers.Main) {
                val localChannels = loadLocalChannels()
                updateChannelList(localChannels)
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    private fun showServiceUnavailableDialog(message: String) {
        runOnUiThread {
            val displayMessage = message.ifEmpty { 
                "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω.\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É." 
            }
            
            AlertDialog.Builder(this)
                .setTitle("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                .setMessage(displayMessage)
                .setPositiveButton("OK") { _, _ ->
                    finish()
                }
                .setCancelable(false)
                .show()
        }
    }
    

    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
     */
    private fun getCachedChannelList(): String? {
        return try {
            val file = java.io.File(filesDir, "cached_channels.m3u8")
            if (file.exists()) {
                file.readText()
            } else {
                null
            }
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${e.message}")
            null
        }
    }



    private fun loadChannels() {
        lifecycleScope.launch {
            try {
                // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                val localChannels = loadLocalChannels()
                if (localChannels.isNotEmpty()) {
                    updateChannelList(localChannels)
                }
                
                // –ó–∞—Ç–µ–º –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                val remoteChannels = remoteConfigManager.downloadChannelList()
                if (remoteChannels != null && remoteChannels.isNotEmpty()) {
                    val channelList = parseM3U8(remoteChannels)
                    updateChannelList(channelList)
                    showToast("–ö–∞–Ω–∞–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤", e)
                showToast("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–∞–ª–æ–≤")
            }
        }
    }
    
    private fun loadLocalChannels(): List<Channel> {
        return try {
            val inputStream = assets.open("custom.m3u8")
            val content = inputStream.bufferedReader().use { it.readText() }
            parseM3U8(content)
        } catch (e: Exception) {
            Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", e)
            emptyList()
        }
    }
    
    private fun parseM3U8(content: String): List<Channel> {
        val channels = mutableListOf<Channel>()
        val lines = content.split("\n")
        
        var i = 0
        while (i < lines.size) {
            val line = lines[i].trim()
            if (line.startsWith("#EXTINF:")) {
                val info = line.substring(8)
                val parts = info.split(",")
                if (parts.size >= 2) {
                    val name = parts[1].trim()
                    
                    if (i + 1 < lines.size) {
                        val url = lines[i + 1].trim()
                        if (url.isNotEmpty() && !url.startsWith("#")) {
                            channels.add(Channel(name, R.drawable.channel_placeholder, url))
                        }
                    }
                }
                i++
            }
            i++
        }
        
        return channels
    }
    
    private fun updateChannelList(newChannels: List<Channel>) {
        channels.clear()
        channels.addAll(newChannels)
        adapter.notifyDataSetChanged()
    }
    
    private fun playChannel(channel: Channel) {
        val intent = Intent(this, PlayerActivity::class.java)
        intent.putExtra("channel_name", channel.name)
        intent.putExtra("channel_url", channel.streamUrl)
        startActivity(intent)
    }
    
    private fun showMaintenanceDialog(message: String) {
        val dialog = AlertDialog.Builder(this)
            .setTitle("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
            .setMessage(message.ifEmpty { "–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." })
            .setPositiveButton("OK") { _, _ ->
                finish()
            }
            .setCancelable(false)
            .create()
        dialog.show()
    }
    
    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private fun showAdminLoginDialog() {
        val builder = AlertDialog.Builder(this)
        val input = EditText(this)
        input.inputType = InputType.TYPE_TEXT_VARIATION_PASSWORD
        input.hint = "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
        
        builder.setTitle("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        builder.setMessage("–í–≤–µ–¥–∏—Ç–µ GitHub Personal Access Token –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        builder.setView(input)
        
        builder.setPositiveButton("–í–æ–π—Ç–∏") { _, _ ->
            val token = input.text.toString().trim()
            if (token.isNotEmpty()) {
                loginAdmin(token)
            } else {
                showToast("–¢–æ–∫–µ–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            }
        }
        
        builder.setNegativeButton("–û—Ç–º–µ–Ω–∞", null)
        builder.show()
    }
    
    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private fun loginAdmin(token: String) {
        lifecycleScope.launch {
            try {
                showToast("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–∫–µ–Ω
                remoteConfigManager.setAccessToken(token)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                if (remoteConfigManager.performAdminAction("login_test")) {
                    showToast("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
                    invalidateOptionsMenu()
                } else {
                    showToast("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
                    remoteConfigManager.clearAccessToken()
                }
            } catch (e: Exception) {
                Log.e("MainActivity", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", e)
                showToast("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                remoteConfigManager.clearAccessToken()
            }
        }
    }
    
    /**
     * –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    private fun logoutAdmin() {
        remoteConfigManager.clearAccessToken()
        showToast("–í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞")
        invalidateOptionsMenu()
    }
    
    private fun showToast(message: String) {
        Toast.makeText(this, message, Toast.LENGTH_SHORT).show()
    }
}

// –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
class ChannelAdapter(
    private val channels: List<Channel>,
    private val onClick: (Channel, Int) -> Unit
) : RecyclerView.Adapter<ChannelAdapter.ChannelViewHolder>() {
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ChannelViewHolder {
        val view = LayoutInflater.from(parent.context).inflate(R.layout.item_channel, parent, false)
        return ChannelViewHolder(view)
    }

    override fun onBindViewHolder(holder: ChannelViewHolder, position: Int) {
        val channel = channels[position]
        holder.bind(channel)
        holder.itemView.setOnClickListener { onClick(channel, position) }
        
        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        holder.itemView.setOnFocusChangeListener { v, hasFocus ->
            v.isSelected = hasFocus
            if (hasFocus) {
                v.animate().scaleX(1.05f).scaleY(1.05f).z(10f).setDuration(150).start()
            } else {
                v.animate().scaleX(1.0f).scaleY(1.0f).z(0f).setDuration(150).start()
            }
        }
    }

    override fun getItemCount() = channels.size

    class ChannelViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
        private val logo: ImageView = itemView.findViewById(R.id.channelLogo)
        private val name: TextView = itemView.findViewById(R.id.channelName)
        
        fun bind(channel: Channel) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏ –∫–∞–Ω–∞–ª–∞
            loadChannelIcon(channel.name, logo)
            name.text = channel.name
        }
        
        private fun loadChannelIcon(channelName: String, imageView: ImageView) {
            // –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞
            val iconName = "channel_${channelName.lowercase()
                .replace(" ", "_")
                .replace("—Ä–æ—Å—Å–∏—è", "russia")
                .replace("–ø–µ—Ä–≤—ã–π", "perviy")
                .replace("–∫–∞–Ω–∞–ª", "kanal") 
                .replace("–Ω—Ç–≤", "ntv")
                .replace("—Ä–µ–Ω", "ren")
                .replace("—Ç–≤", "tv")
                .replace("—Ü–µ–Ω—Ç—Ä", "centr")
                .replace("–∑–≤–µ–∑–¥–∞", "zvezda")
                .replace("–¥–æ–º–∞—à–Ω–∏–π", "domashniy")
                .replace("–∫—É–ª—å—Ç—É—Ä–∞", "kultura")
                .replace("–ø—è—Ç–Ω–∏—Ü–∞", "pyatnica")
                .replace("–∫–∞—Ä—É—Å–µ–ª—å", "karusel")
                .replace("–º–∞—Ç—á!", "match")
                .replace("–º–∞—Ç—á", "match")
                .replace("–º–∏—Ä", "mir")
                .replace("–º—É–∑", "muz")
                .replace("—Ä–±–∫", "rbk")
                .replace("–æ—Ç—Ä", "otr")
                .replace("—Å–ø–∞—Å", "spas")
                .replace("—Å—Ç—Å", "sts")
                .replace("—Ç–Ω—Ç", "tnt")
                .replace("—Ätr_–ø–ª–∞–Ω–µ—Ç–∞_–µ–≤—Ä–æ–ø–∞", "rtr_planeta_evropa")
                .replace("hd", "")
                .replace("-", "_")
                .replace(".", "_")
                .replace("!", "")
                .trim('_')}"
            
            // –ò—â–µ–º —Ä–µ—Å—É—Ä—Å –ø–æ –∏–º–µ–Ω–∏
            val iconResId = itemView.context.resources.getIdentifier(
                iconName, "drawable", itemView.context.packageName
            )
            
            if (iconResId != 0) {
                // –ï—Å–ª–∏ –∏–∫–æ–Ω–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
                imageView.setImageResource(iconResId)
            } else {
                // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
                imageView.setImageResource(R.drawable.channel_placeholder)
            }
        }
    }
} 