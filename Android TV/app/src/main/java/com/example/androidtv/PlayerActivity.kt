package com.example.androidtv

import android.annotation.SuppressLint
import android.os.Build
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.KeyEvent
import android.view.View
import android.widget.LinearLayout
import android.widget.TextView
import android.widget.Toast
import androidx.annotation.OptIn
import androidx.appcompat.app.AppCompatActivity
import androidx.core.net.toUri
import androidx.media3.common.C
import androidx.media3.common.MediaItem
import androidx.media3.common.PlaybackException
import androidx.media3.common.Player
import androidx.media3.common.util.UnstableApi
import androidx.media3.datasource.DefaultHttpDataSource
import androidx.media3.exoplayer.ExoPlayer
import androidx.media3.exoplayer.hls.HlsMediaSource

import androidx.media3.ui.PlayerView
import androidx.media3.exoplayer.trackselection.DefaultTrackSelector

@OptIn(UnstableApi::class)
class PlayerActivity : AppCompatActivity() {
    private var player: ExoPlayer? = null
    private lateinit var playerView: PlayerView
    private val errorHandler = Handler(Looper.getMainLooper())
    private val uiHandler = Handler(Looper.getMainLooper())
    private var errorShown = false
    private lateinit var trackSelector: DefaultTrackSelector
    private var subtitlesEnabled = false
    private lateinit var channelIndicator: LinearLayout
    private lateinit var channelNumberText: TextView

    private lateinit var channelList: ArrayList<Channel>
    private var channelIndex: Int = 0
    private var digitBuffer = "" // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ –∫–∞–Ω–∞–ª–∞
    private val digitInputHandler = Handler(Looper.getMainLooper())

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_player)

        playerView = findViewById(R.id.playerView)
        playerView.useController = true // —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        // –ù–µ –≤—ã–∑—ã–≤–∞–µ–º showController(), —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
        channelIndicator = findViewById(R.id.channelIndicator)
        channelNumberText = findViewById(R.id.channelNumberText)
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å
        channelList = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            intent.getParcelableArrayListExtra("CHANNEL_LIST", Channel::class.java) ?: arrayListOf()
        } else {
            @Suppress("DEPRECATION")
            intent.getParcelableArrayListExtra<Channel>("CHANNEL_LIST") ?: arrayListOf()
        }
        channelIndex = intent.getIntExtra("CHANNEL_INDEX", 0)

        if (channelList.isEmpty() || channelIndex !in channelList.indices) {
            showErrorAndExit()
            return
        }

        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
        updateChannelIndicator()
        
        // –°–∫—Ä—ã—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        uiHandler.postDelayed({
            channelIndicator.animate()
                .alpha(0f)
                .setDuration(500)
                .start()
        }, 3000)

        playChannel(channelIndex)
    }

    @SuppressLint("SetTextI18n")
    private fun updateChannelIndicator() {
        // –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞
        channelNumberText.text = "${channelIndex + 1}/${channelList.size}"
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        channelIndicator.alpha = 1f
        channelIndicator.visibility = View.VISIBLE
        
        // –°–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        uiHandler.removeCallbacks(hideChannelIndicatorRunnable)
        uiHandler.postDelayed(hideChannelIndicatorRunnable, 3000)
    }
    
    private val hideChannelIndicatorRunnable = Runnable {
        channelIndicator.animate()
            .alpha(0f)
            .setDuration(500)
            .start()
    }

    private fun playChannel(index: Int) {
        val channel = channelList[index]
        player?.release()
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–∫-—Å–µ–ª–µ–∫—Ç–æ—Ä–∞
        trackSelector = DefaultTrackSelector(this)
        // –û—Ç–∫–ª—é—á–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
        trackSelector.parameters = trackSelector.parameters
            .buildUpon()
            .setTrackTypeDisabled(C.TRACK_TYPE_TEXT, !subtitlesEnabled)
            .build()
        
        player = ExoPlayer.Builder(this)
            .setTrackSelector(trackSelector)
            .build().also { exoPlayer ->
            playerView.player = exoPlayer
            val dataSourceFactory = DefaultHttpDataSource.Factory()
                .setUserAgent("Mozilla/5.0 (Android TV ExoPlayer)")
                .setAllowCrossProtocolRedirects(true)
            val mediaItem = MediaItem.fromUri(channel.streamUrl.toUri())
            val mediaSource = HlsMediaSource.Factory(dataSourceFactory).createMediaSource(mediaItem)
            exoPlayer.setMediaSource(mediaSource)
            exoPlayer.prepare()
            exoPlayer.playWhenReady = true
            exoPlayer.addListener(object : Player.Listener {
                override fun onPlayerError(error: PlaybackException) {
                    if (!errorShown) {
                        errorShown = true
                        showErrorAndExit()
                    }
                }
            })
        }
        showChannelNameToast(channel.name)
        
        // –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞–Ω–∞–ª–∞
        updateChannelIndicator()
    }

    private fun showChannelNameToast(name: String) {
        // –ü—Ä–æ—Å—Ç–æ–π Toast –±–µ–∑ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ view (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        Toast.makeText(this, "üì∫ $name", Toast.LENGTH_SHORT).show()
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–Ω–∞–ª
     */
    private fun nextChannel() {
        if (channelList.isNotEmpty()) {
            channelIndex = (channelIndex + 1) % channelList.size
            playChannel(channelIndex)
        }
    }

    /**
     * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–∞–Ω–∞–ª
     */
    private fun previousChannel() {
        if (channelList.isNotEmpty()) {
            channelIndex = if (channelIndex - 1 < 0) channelList.size - 1 else channelIndex - 1
            playChannel(channelIndex)
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª
     */
    private fun handleDigitInput(digit: String) {
        digitBuffer += digit
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–±–∏—Ä–∞–µ—Ç—Å—è
        channelNumberText.text = "–ö–∞–Ω–∞–ª: $digitBuffer"
        channelIndicator.alpha = 1f
        channelIndicator.visibility = View.VISIBLE
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        digitInputHandler.removeCallbacks(processDigitInput)
        
        // –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–ª–∏ –±–æ–ª—å—à–µ 3 —Ü–∏—Ñ—Ä, —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
        if (digitBuffer.length >= 3) {
            processDigitInput.run()
        } else {
            // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ü–∏—Ñ—Ä—ã
            digitInputHandler.postDelayed(processDigitInput, 2000)
        }
    }
    
    private val processDigitInput = Runnable {
        if (digitBuffer.isNotEmpty()) {
            val channelNumber = digitBuffer.toIntOrNull()
            if (channelNumber != null && channelNumber > 0 && channelNumber <= channelList.size) {
                channelIndex = channelNumber - 1 // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
                playChannel(channelIndex)
            } else {
                Toast.makeText(this, "–ö–∞–Ω–∞–ª $digitBuffer –Ω–µ –Ω–∞–π–¥–µ–Ω", Toast.LENGTH_SHORT).show()
                updateChannelIndicator() // –í–µ—Ä–Ω—É—Ç—å –æ–±—ã—á–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            }
            digitBuffer = ""
        }
    }

    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {
        if (channelList.isNotEmpty()) {
            when (keyCode) {
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –∫–ª–∞–≤–∏—à –ø—É–ª—å—Ç–∞
                KeyEvent.KEYCODE_CHANNEL_UP,
                KeyEvent.KEYCODE_DPAD_UP,
                KeyEvent.KEYCODE_MEDIA_NEXT,
                KeyEvent.KEYCODE_PLUS -> {
                    nextChannel()
                    return true
                }
                KeyEvent.KEYCODE_CHANNEL_DOWN,
                KeyEvent.KEYCODE_DPAD_DOWN,
                KeyEvent.KEYCODE_MEDIA_PREVIOUS,
                KeyEvent.KEYCODE_MINUS -> {
                    previousChannel()
                    return true
                }
                // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ
                KeyEvent.KEYCODE_DPAD_LEFT -> {
                    previousChannel()
                    return true
                }
                KeyEvent.KEYCODE_DPAD_RIGHT -> {
                    nextChannel()
                    return true
                }
                // –¶–∏—Ñ—Ä–æ–≤—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –∫–∞–Ω–∞–ª
                KeyEvent.KEYCODE_0 -> {
                    handleDigitInput("0")
                    return true
                }
                KeyEvent.KEYCODE_1 -> {
                    handleDigitInput("1")
                    return true
                }
                KeyEvent.KEYCODE_2 -> {
                    handleDigitInput("2")
                    return true
                }
                KeyEvent.KEYCODE_3 -> {
                    handleDigitInput("3")
                    return true
                }
                KeyEvent.KEYCODE_4 -> {
                    handleDigitInput("4")
                    return true
                }
                KeyEvent.KEYCODE_5 -> {
                    handleDigitInput("5")
                    return true
                }
                KeyEvent.KEYCODE_6 -> {
                    handleDigitInput("6")
                    return true
                }
                KeyEvent.KEYCODE_7 -> {
                    handleDigitInput("7")
                    return true
                }
                KeyEvent.KEYCODE_8 -> {
                    handleDigitInput("8")
                    return true
                }
                KeyEvent.KEYCODE_9 -> {
                    handleDigitInput("9")
                    return true
                }
                // –í—ã—Ö–æ–¥ –∏–∑ –ø–ª–µ–µ—Ä–∞
                KeyEvent.KEYCODE_BACK, KeyEvent.KEYCODE_ESCAPE -> {
                    finish()
                    return true
                }
            }
        }
        return super.onKeyDown(keyCode, event)
    }

    private fun showErrorAndExit() {
        Toast.makeText(this, "–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞", Toast.LENGTH_LONG).show()
        errorHandler.postDelayed({
            finish()
        }, 2000)
    }

    override fun onStop() {
        super.onStop()
        player?.release()
        player = null
        // –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        uiHandler.removeCallbacksAndMessages(null)
        errorHandler.removeCallbacksAndMessages(null)
        digitInputHandler.removeCallbacksAndMessages(null)
    }
} 